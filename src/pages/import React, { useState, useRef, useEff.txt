import React, { useState, useRef, useEffect } from 'react';
import axios from 'axios';
import InputField from "../components/InputField";
import { Toast } from 'primereact/toast';
import { ProgressSpinner } from 'primereact/progressspinner';
import { Dropdown } from 'primereact/dropdown';
import $ from 'jquery';
import 'dropify/dist/js/dropify.min.js';
import 'dropify/dist/css/dropify.min.css';
import { DataTable } from 'primereact/datatable';
import { Column } from 'primereact/column';
import './receipt.css'
import { useParams } from 'react-router-dom';
import { BiCartAdd, BiPlug, BiPlus, BiPrinter } from 'react-icons/bi';

export default function Receipt() {
    const [formData, setFormData] = useState({
        qty: '',
        price: '',
        supplier_id: '',
        product_id: '',
        updateFormData:''
    });
    const { id } =  useParams(); // Extracts the ID from the URL

    const [saveFormData, setSaveFormData] = useState([]);

    const [selectedProduct, setSelectedProduct] = useState([]);


    const [processing, setProcessing] = useState(false);
    const [openPrice, setOpenPrice] = useState(false);
    const [openQty, setOpenQty] = useState(false);
    const [isUpdate, setIsUpdate] = useState(false);
    const [users, setUsers] = useState([]); // Users for the dropdown
    const [suppliers, setSuppliers] = useState([]); // Suppliers for the dropdown
    const [suppliersData, setSuppliersData] = useState([]);
    const [sale, setSale] = useState([]);
    const [productData, setProductData] = useState([]);
    const [FormArray, setFormArray] = useState([]);
    const [copyProduct, setCopyProduct] = useState([]);
    // Suppliers for the dropdown
    const toast = useRef(null);


    const [updateFormData, setUpdateFormData] = useState({
        qty: '',
        selling_price: '',
        product_id: '',
        updatedPrice:false,
        updatedQty:false,
    });

    useEffect(() => {
        const fetchData = async () => {
            try {
                // Fetch suppliers data from your API
                const response = await axios.get('https://api.scan-verify.com/api/suppliers');
                const suppliers = response.data;

                // Transform the suppliers data
                const transformedData = suppliers.map(supplier => ({
                    id: supplier.id,
                    name: supplier.business_name  // Assuming you want to use `business_name` as `name`
                }));

                // Update state with the transformed data
                setSuppliersData(transformedData);

                // Log the transformed data for verification
                console.log(transformedData);
            } catch (error) {
                console.error('Error fetching data:', error);
            }
        };

        fetchData();
    }, []);



    const  fetch  = async ()=>{
        try {
            const response = await axios.get('https://api.scan-verify.com/api/products', {
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            console.log('Product added:', response.data);


                console.log(response.data)

        } catch (error) {
            console.error('Error adding product:', error);
        }
     }


    const  fetchSale  = async ()=>{
        try {
            const response = await axios.get(`https://api.scan-verify.com/api/sales/${id}`, {
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            setSale(response.data.sale.products)
            setProductData(response.data)
            console.log('Sale Data', response.data.shop);       
           
          

        } catch (error) {
            console.error('Error adding product:', error);
        }
     }




    useEffect(() => {
        fetchSale()
        
        fetch();
    }, []);




    const handleQtyChange = (value,change) => {

        setUpdateFormData((prevState) => ({
            ...prevState,
            qty: value,
            product_id:change,
            updatedQty:true,
        }));
    };

    const handlePrint = ()=>{
        window.print();
    }

    const handlePriceChange = (value,change) => {

        setUpdateFormData((prevState) => ({
            ...prevState,
            selling_price: value,
            product_id:change,
            updatedPrice:true,
        }));
    };

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData((prevState) => ({
            ...prevState,
            [name]: value
        }));
    };



    const handleSupplierChange = (e) => {
        setFormData((prevState) => ({
            ...prevState,
            supplier_id: e.target.value
        }));
    };

   

    const handleProductChange = (e) => {
        const { name, value } = e.target;

        setFormData((prevState) => ({
            ...prevState,
            product_id: value,
        }));



        setSelectedProduct((prevState) => {
            const selectedProductExists = prevState.some((product) => product.id === value);

            if (!selectedProductExists) {
                setCopyProduct({ id: value, name: name });
                console.log("copy1", copyProduct)

                console.log("form1", selectedProduct)
                return [{ id: value, name: name }];
            } else {

                setCopyProduct(prevState.id);
                console.log("copy2", copyProduct)
                return prevState;
            }

        });



        console.log('selectedProduct:', selectedProduct)
    };



    useEffect(() => {
        console.log('updateFormData:', updateFormData)

    }, [updateFormData]);

    const showSuccess = (severity, summary, message) => {
        toast.current.show({ severity, summary, detail: message, life: 10000 });
    };

    useEffect(() => {
        setFormData((prevState) => ({
                 ...prevState,
                 price: copyProduct?.id?.selling_price,
                 qty: copyProduct?.id?.qty,
             }));

 }, [copyProduct]);

    const handleSubmit = async (e) => {
        e.preventDefault();
        setProcessing(true);

        const form = new FormData();
        form.append('price', formData.price);
        form.append('qty', formData.qty);
        form.append('product_id', formData.product_id?.id);
        form.append('supplier_id', formData.supplier_id?.id);
        // form.append('updateFormData', JSON.stringify(FormArray));


        console.log("Copy prod", copyProduct)

        try {
            const response = await axios.post('https://api.scan-verify.com/api/stocks', form, {
                headers: {
                    'Content-Type': 'multipart/form-data'
                }
            });
            console.log('Stock added:', response.data);
            showSuccess('success', 'Stock', 'Purchase successfully placed');
        } catch (error) {
            console.error('Error adding stock:', error);
            showSuccess('error', 'Stock', 'Failed to Purchase');
        } finally {
            setProcessing(false);
        }
    };


    const update = () => {
        const newFormArray = [...FormArray, updateFormData];
        setFormArray(newFormArray);
        setUpdateFormData([]);

        console.log('Form Data:', updateFormData);
        console.log('Current Data:', newFormArray);
        setIsUpdate(true);

        // Reset isUpdate after 200ms using a timeout
        setTimeout(() => {
            setIsUpdate(false);
        }, 200);
    };

    useEffect(() => {
        setOpenPrice(false);
        setOpenQty(false);

        console.log("Latest",FormArray)
        setFormData((prevState)=>({
            ...prevState,
            updateFormData:FormArray,
        }))

        if (!isUpdate) {
            setSelectedProduct([]);
        }
    }, [isUpdate]);



    const qtyBody = (rowData) => {

        return(
            <div className=''>
            <div className='flex items-center justify-center text-green-500'>
                <input
                    type="number"
                    onClick={(e)=>{setOpenQty(true);}}
                    name="qty"
                    placeholder="Quantity"
                    value={openQty? copyProduct.qty :  rowData.id.qty}
                    onChange={(e)=>{ handleQtyChange(e.target.value,rowData.id.id)} }
                    className="rounded-md border w-20 text-center border-green-500 bg-white px-1  text-base font-medium text-[#26ad38] outline-none focus:border-[#6A64F1] focus:shadow-md"
                />


            </div>
            </div>
        )
      };

      const priceBody = (rowData) => {

        return(
            <div className='flex items-center justify-center text-green-500'><b>{"â‚¦  "}</b>
             <input
                type="number"
                onClick={(e)=>{setOpenPrice(true);}}
                name="selling_price"
                placeholder="Price"
                value={openPrice? copyProduct.selling_price :  rowData.id.selling_price}
                onChange={(e)=>{ handlePriceChange(e.target.value,rowData.id.id) }}
                className="rounded-md border w-20 text-center border-green-500 bg-white px-1  text-base font-medium text-[#26ad38] outline-none focus:border-[#6A64F1] focus:shadow-md"
            />


            </div>
        )
      };

      const actionButtonTemplate = (rowData) => {
        return (
          <div className='grid grid-cols-2 justify-center'>
            <div
            onClick={update}
             type='button'
           tooltip="Update Product"
              className="p-button-rounded px-4 my-auto border hover:bg-green-400  bg-green-500 items-center justify-center rounded-md text-white w-12 h-12 p-button-warning mr-2"
            >
              <i className="pi pi-plus-circle w-12 text-success"></i>Update
            </div>

          </div>
        );
      };

    return (
        <>
       <div className='container mx-auto w-1/3 mt-4'>
       <div className='border border-spacing-1 border-green-200 bg-green-100 mt-4 text-green-900 rounded-md  px-2 py-3'>
            <div className='grid grid-cols-2 gapx-2 justify-center items-center'>
                <BiCartAdd/>
                <span>Purchase successfully</span>
            </div>
        </div>
      

       <div className='border border-spacing-1 gap-2 grid grid-cols-2 px-2'>            
            <button
             onClick={()=>{handlePrint()}} 
             className='bg-green-500 hover:bg-green-900 text-white mt-5 w-1/2 rounded-md grid grid-cols-2  justify-center items-center'>
                <BiPrinter/>
                <span>Print</span>
            </button>
            <button className='bg-green-500 hover:bg-green-900 ml-3 text-white mt-5 w-1/2 rounded-md grid grid-cols-2  justify-center items-center'>
                <BiPlus/>
                <span>New Sale</span>
            </button>
        </div>

       </div>

        <div className="flex items-center justify-center p-4">            
            <div id="receipt-print" className="w-[80mm] max-w-[80mm] bg-white backdrop-opacity-90 p-4 shadow-lg rounded-md font-mono">
                <div  className=' p-4 font-mono'>
                    <img src='https://www.jigawapalliative.com.ng/wp-content/uploads/2024/07/e-500-x-199-px-1-e1721594916831.png' className='mx-auto w-6 h-10' />
                </div>
                <div  className='p-4 font-mono text-center'>
                <div style={{ fontSize: '12px' }}>***********************</div><br/>
                    <span className=" font-bold" style={{ fontSize: '10px' }}>Jigawa State Palliative Shop</span><br/>
                <div style={{ fontSize: '12px' }}>************************</div><br/>
                    {/* <span className="mt-3"><b>Processed By:</b><br/>{productData?.sale.agent?.name}</span><br/>
                    <span className="mt-3"><b>Shop Name:</b><br/> {productData?.shop?.shopname}</span> */}
                </div>
                {/* <span className=' text-1xl' style={{fontSize:'12px'}}><b>Ref No:</b> {productData.sale.ref}</span><br/> */}
                <span className=' text-1xl' style={{fontSize:'12px'}}><b>Date:</b> 24 August 2024, 9:30 PM</span>
                <table className='w-full border-y border-collapse border-black'>
                    <thead>
                        <tr className='border-y border-black' style={{ fontSize: '12px' }}>
                            <th className='text-left px-2 py-1'>S/N</th>
                            <th className='text-left px-2 py-1'>Item</th>
                            <th className='text-left px-2 py-1'>Qty</th>
                            <th className='text-left px-2 py-1'>Total</th>
                        </tr>
                    </thead>
                    <tbody>


                    {sale.map((product, index) => (
                        <tr key={index} style={{ fontSize: '12px' }}>
                            <td className='text-left px-2 py-1'>{index + 1}</td>
                            <td className='text-left px-2 py-1'>{product.name}</td>
                            <td className='text-left px-2 py-1'>{product.pivot.qty}</td> 
                            <td className='text-left px-2 py-1'>N{product.selling_price}</td> 
                        </tr>
                    ))}
                        

                    </tbody>
                </table>

            </div>
        </div>
        </>
    );
}
